'''
Описание задачи: Вам нужно разработать систему управления умным домом.
Система должна контролировать разные устройства, такие как лампы,
термостаты, камеры, и должна предоставлять интерфейс для управления
этими устройствами, а также собирать и анализировать данные о работе
устройств.
Основные требования:

1. Базовый класс SmartDevice
o Создайте абстрактный класс SmartDevice, представляющий
базовый интерфейс для всех умных устройств. Он должен
включать:
 Поля для имени устройства, состояния
(включено/выключено), и уровня заряда.
 Методы turn_on() и turn_off(), которые включают и
выключают устройство.
 Абстрактный метод perform_action(), который будет
переопределяться в подклассах, чтобы каждое устройство
выполняло свою уникальную функцию.

2. Подклассы для разных устройств
o Создайте подклассы для различных типов устройств, таких как:
 Light: устройство, которое может включаться и
выключаться, а также менять яркость и цвет.
 Thermostat: устройство, которое регулирует температуру и
позволяет устанавливать разные режимы.
 Camera: устройство, которое может записывать видео,
делать фотографии и отправлять уведомления при
обнаружении движения.
o Каждый из этих классов должен реализовать свой вариант метода
perform_action() для выполнения своих уникальных функций.

3. Класс SmartHome
o Создайте класс SmartHome, который будет управлять всеми
устройствами:
 Храните список всех устройств в доме.
 Создайте методы для добавления и удаления устройств.
 Создайте метод control_device(), который будет находить
устройство по имени и выполнять для него команду
(включение, выключение или выполнение действия).
 Реализуйте метод status_report(), который будет выводить
текущий статус всех устройств, включая их состояние и
уровень заряда.

4. Обработка событий и уведомлений
o Реализуйте систему уведомлений, используя паттерн
"Наблюдатель". Создайте класс NotificationCenter, который будет
принимать подписчиков (например, пользователей) и отправлять
уведомления, когда сработает какое-то событие (например,
обнаружение движения камерой или достижение низкого уровня
заряда у устройства).
o Устройства, такие как Camera, должны отправлять уведомления
при обнаружении движения.

5. Энергосбережение и планирование работы
o Реализуйте режим энергосбережения для устройств. Например,
когда уровень заряда устройства падает ниже определенного
значения, оно должно выключаться автоматически и отправлять
уведомление о необходимости подзарядки.
o Добавьте возможность устанавливать расписание для устройств.
Например, включение света в определенное время или изменение
температуры.

6. Многопоточность
o Добавьте многопоточность для имитации работы устройств в
режиме реального времени, например, каждое устройство
работает в своем потоке, выполняя свои действия (например,
изменение температуры или периодическая запись видео).
o Используйте таймеры для имитации периодических событий
(например, камеры, которые записывают видео каждые 5 минут).

7. Расширенные функции (опционально)
o Добавьте интерфейс (например, через командную строку) для
управления устройствами, так, чтобы пользователь мог вводить
команды для взаимодействия с системой.
o Реализуйте сбор и анализ данных. Например, сохраняйте данные
об активности устройств и строите отчеты по энергопотреблению
и времени работы каждого устройства.
'''
